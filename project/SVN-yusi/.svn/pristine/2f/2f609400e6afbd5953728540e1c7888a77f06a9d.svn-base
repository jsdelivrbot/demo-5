package ekuter.mvc.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ekuter.mvc.constants.Constants;
import ekuter.mvc.exception.BusinessException;
import ekuter.mvc.util.ResultMessageUtil;
import mybatisPro.mybatisEntity.AreaEntity;
import mybatisPro.mybatisEntity.AverageRainfallEntityUtil;
import mybatisPro.mybatisEntity.StationInfoEntityUtil;
import mybatisPro.mybatisService.impl.AreaService;
import mybatisPro.mybatisService.impl.StationParamService;

/**
 * 区域降雨量管理
 * @author si.yu
 * @date 2017/7/24
 * @version 1.0
 * */
@RestController
@RequestMapping("areaRainfall")
public class AreaRainfallController {
	
	private static final Logger logger=LoggerFactory.getLogger(AreaRainfallController.class);
	
	@Autowired 
	private AreaService areaService;
	
	@Autowired
	private StationParamService paramService;
	
	
	/**
	 * 区域平均降雨量计算
	 * @param begin_time 开始时间
	 * @param end_time 结束时间
	 * @return
	 * */
	@RequestMapping("areaAverageRainfall")
	public ResultMessageUtil getAreaAverageRainfall(String begin_time,String end_time){
		
		ResultMessageUtil resultMsg = new ResultMessageUtil();
		
		if(null != begin_time || null != end_time){
			//查询区域列表信息
			List<AreaEntity> areaEntities = areaService.findListOfArea();
			
			if(null != areaEntities){
				//创建区域平均降雨量信息队列
				List<AverageRainfallEntityUtil> averageRainfallList =
						new ArrayList<AverageRainfallEntityUtil>();
				//遍历区域信息列表
				for(AreaEntity areaEntity : areaEntities){
					
					//实例化工具类对象
					AverageRainfallEntityUtil averageUtil = new AverageRainfallEntityUtil();
					//循环获取区域ID
					Long area_id = areaEntity.getArea_id();
					//获取区域名称
					String area_name = areaEntity.getArea_name();
					//获取区域算法类型
					Integer alogorithmType = areaEntity.getAlgorithmType();
					
					
					if(null != area_id){
						//查询该区域内测站信息
						List<StationInfoEntityUtil> stationRainfallList = 
								areaService.getAreaStationsInfoByAreaId(Constants.RAINFALL_STATION
										, begin_time, end_time, area_id);
						
						if(null != stationRainfallList){
							//绑定区域信息
							averageUtil.setArea_id(area_id);//区域ID
							averageUtil.setArea_name(area_name);//区域名称
							averageUtil.setAlgorithmType(alogorithmType);//区域平均雨量算法类型
							
							if(!stationRainfallList.isEmpty()){
								//分析该区域内最大雨量站和最大雨量
								averageUtil = maxRainfallStationAnalysis(averageUtil,stationRainfallList);
								//计算区域平均降雨量
								averageUtil = averageRainfallAnalysis(alogorithmType,averageUtil,stationRainfallList);
								
								averageUtil.setStation_info_list(stationRainfallList);
								
								//将单个平均雨量信息放入区域平均降雨量信息队列
								averageRainfallList.add(averageUtil);
							}else{
								averageUtil.setMessage("该区域未部署检测雨量站");
								averageRainfallList.add(averageUtil);
							}
							
						}else{
							logger.info(Constants.EXCEPTION_MAP.get("STATIONRAINFALL"));
							throw new BusinessException(Constants.EXCEPTION_MAP.get("STATIONRAINFALL"));
						}
					}else{
						logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
						throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
					}
				}
				resultMsg.setData(averageRainfallList);
				return resultMsg;
			}else{
				logger.info(Constants.EXCEPTION_MAP.get("GETLISTAREA"));
				throw new BusinessException(Constants.EXCEPTION_MAP.get("GETLISTAREA"));
			}
		}else{
			logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
			throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
		}
	}
 

	/**
	 * 计算区域平均降雨量
	 * @param alogorithmType 算法类型
	 * @param averageUtil
	 * @param stationRainfallList
	 * @return averageUtil
	 * */
	private AverageRainfallEntityUtil averageRainfallAnalysis(Integer alogorithmType,AverageRainfallEntityUtil averageUtil,
			List<StationInfoEntityUtil> stationRainfallList) {
		
		Float rainfall = 0.0f;
		int count = 0;
		//计算区域平均雨量（0:算术平均算法；1：系数平均算法）
		if(0 == alogorithmType){//0:算术平均算法
			
			for(StationInfoEntityUtil stationUtil : stationRainfallList){
				//累加该区域所有站的降水量
				rainfall += stationUtil.getRainfall();
				//记录该区域测站的个数
				count++;
			}
			//按算术平均法计算该区域的平均降雨量
			Float averageRainfall = rainfall/count;
			averageUtil.setAverage_rainfall(averageRainfall);
			
		}else if(1 == alogorithmType){//1：系数平均算法
			
		    List<Map<String, Object>> paramInfoList = new ArrayList<Map<String, Object>>();
			
			for(StationInfoEntityUtil stationUtil : stationRainfallList){
				Map<String, Object> paramInfo = new HashMap<String,Object>();
				//获取测站ID
				Long sta_id = stationUtil.getId();
				if(null != sta_id){
					//根据测站ID查询该站对应的系数
					Float sta_param = paramService.getStationParamByStaId(sta_id);
					
					if(null != sta_param){
						//获取该站时间段内降雨量
						Float sta_rainfall = stationUtil.getRainfall();
						//降雨量乘以与该站对应的系数
						Float param_rainfall = sta_rainfall*sta_param;
						//累加该区域所有站的降水量
						rainfall += param_rainfall;
						//记录该区域测站的个数
						count++;
						//将该测站对应系数存放入map中
						paramInfo.put("param_staId", sta_id);
						paramInfo.put("param_staName", stationUtil.getStation_name());
						paramInfo.put("param_value", sta_param);
						
						paramInfoList.add(paramInfo);
					}else{
						logger.info(Constants.EXCEPTION_MAP.get("STATIONPARAM"));
						throw new BusinessException(Constants.EXCEPTION_MAP.get("STATIONPARAM"));
					}
					
				}else{
					logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
					throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
				}
			}
			//按系数平均法计算该区域的平均降雨量
			Float averageRainfall = rainfall/count;
			averageUtil.setAverage_rainfall(averageRainfall);
			averageUtil.setParam_list(paramInfoList);
		}else{
			logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
			throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
		}
		return averageUtil;
	}


	/**
	 * 分析该区域内最大雨量站和最大雨量
	 * @param averageUtil
	 * @param stationRainfallList
	 * @return averageUtil
	 * */
	private AverageRainfallEntityUtil maxRainfallStationAnalysis(AverageRainfallEntityUtil averageUtil,
			List<StationInfoEntityUtil> stationRainfallList) {
		
		Long maxStationId = null;
		Float maxRainfall = 0.0f;
		String maxStationName = null;
		//遍历测站雨量信息
		for(StationInfoEntityUtil stationUtil : stationRainfallList){
			//获取该站的降雨量
			Float rainfall = stationUtil.getRainfall();
			
			if(rainfall > maxRainfall){
				maxRainfall = rainfall;
				maxStationId = stationUtil.getId();
				maxStationName = stationUtil.getStation_name();
			}
		}
		averageUtil.setMax_Rainfall(maxRainfall);
		averageUtil.setMaxStation(maxStationName);
		averageUtil.setMaxStation_id(maxStationId);
		
		return averageUtil;
		
	}
}
