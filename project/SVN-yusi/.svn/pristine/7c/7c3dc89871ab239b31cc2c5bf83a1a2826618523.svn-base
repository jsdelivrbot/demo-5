//数组去重
var unique=function(arr){
    var res=[];
    for(var i=0,len=arr.length;i<len;i++){
        var obj = arr[i];
        for(var j=0,jlen = res.length;j<jlen;j++){
            if(res[j]===obj) break;
        }
        if(jlen===j)res.push(obj);
    }
    return res;
}

//获取url中的参数
var getUrlParamH = function getUrlParam(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象
    var r = window.location.search.substr(1).match(reg);  //匹配目标参数
    if (r != null) return unescape(r[2]); return null; //返回参数值
}
/**
 * 弹框的关闭
 * @param msg 弹框关闭后的提示信息
 * @param hideArea 弹框id
 */
var outBoxClose = function outBox(msg,hideArea){
	$("#tipMsg").addClass("active").html(msg).show();
	function tipHide(){
		$("#tipMsg").hide();
	}
    setTimeout(tipHide,2000);
	$("#"+hideArea).modal('hide');
};

var errorBox = function(msg){
    $("#errorInfo").text(msg);
    $("#errorBtn").modal("show");
};

/**数组中删除指定元素**/
 var deleteValue = function(arr,val){
   	for (var i = 0; i < arr.length; i++) {
   	 	if(arr[i] == val){
   	 		arr.splice(i,1);
   	 		break;
   	 	}
   	}
 };

//获取当前日期
var DateToday= function(flag) {
	var d = new Date();
	var year = d.getFullYear();
	var month = d.getMonth() + 1;
	if (month < 10) {
		month = '0' + month;
	}
	var day = d.getDate();
	if (day < 10) {
		day = '0' + day;
	}
	var hour = d.getHours();
	if (hour < 10) {
		hour = '0' + hour;
	}
	var min = d.getMinutes();
	if (min < 10) {
		min = '0' + min;
	}
	var str;
	if(flag=="years"){
		str = year;
		return str;
	}else if(flag=="months"){
		str = year + "-" + month ;
		return str;
	}else if(flag=="days"){
		str = year + "-" + month + "-" + day;
		return str;
	}
};

var datePrev = function(){
	var year = $('#monthsPicker').val().split("-")[0];
	var month = $('#monthsPicker').val().split("-")[1];
	month--;
	if(month<1){
		month = 12;
		year-=1;
	}

	if(month<10){
		month='0'+month;
	}
	$('#monthsPicker').val(year+'-'+month);
	return year+'-'+month;
};
var dateNext = function(){
	var d=new Date();
	var year= $('#monthsPicker').val().split("-")[0];
	var month = $('#monthsPicker').val().split("-")[1];
	month++;
	if(month<10){
		month='0'+month;
	}

	if(month>12){
		year++;
		month-=12;
		if(month<10){
		  month='0'+month;
		}
	}
	if(year==d.getFullYear()&&month>d.getMonth()+1){
		return ;
	}
	$('#monthsPicker').val(year+'-'+month);
	return year+'-'+month;
};
// 获取某年某月最后一天
var dateLast = function(year,month){
    var thisTime = new Date(year+"-"+(Number(month)+1));
    thisTime.setDate(0);
    return thisTime.getDate();
};

function formatnumber(value, num) {
    var a, b, c, i;
    a = value.toString();
    b = a.indexOf(".");
    c = a.length;
    if (num == 0) {
        if (b != -1) {
            a = a.substring(0, b);
        }
    } else {
        if (b == -1) {
            a = a + ".";
            for (i = 1; i <= num; i++) {
                a = a + "0";
            }
        } else {
            a = a.substring(0, b + num + 1);
            for (i = c; i <= b + num; i++) {
                a = a + "0";
            }
        }
    }
    return a;
}

function round(num,n){
    var   dd=1;
    var   tempnum;
    for(i=0;i<n;i++){
        dd*=10;
    }
    tempnum=num*dd;
    tempnum=Math.round(tempnum);
    return formatnumber(tempnum/dd,n);
}


/*初始化datetimepicker*/
function initDateTimePicker(startId,endId){
    //改变时间时,限制前后时间
    $("#"+startId).on("changeDate",function(){
        var time = Date.parse($(this).val())+5*60*1000;
        $('#'+endId).datetimepicker('setStartDate', new Date(time));
    });
    $("#"+endId).on("changeDate",function(){
        var time = Date.parse($(this).val())-5*60*1000;
        $('#'+startId).datetimepicker('setEndDate', new Date(time));
    });

    // 1. 初始化插件
    // 结束时间
    var end = new Date();
    end = end - end%(5*60*1000);
    $("#"+endId).datetimepicker("setDate", new Date(end));
    // 开始时间
    var start=new Date();
        start.setHours(8);
        start.setMinutes(0);
        start.setSeconds(0);
        start.setMilliseconds(0);
    if (start > new Date(end)) {
        start = new Date(start.getTime()-24*60*60*1000);
    }
    $('#'+startId).datetimepicker('setDate', start);
    //2. 开始和结束时间限制
    $("#"+startId).trigger("changeDate");
    $("#"+endId).trigger("changeDate");

    // 2. 每分钟更新结束时间
    $('#'+endId).datetimepicker('setEndDate', new Date());
    $('#'+endId).datetimepicker('setDate', new Date());
    var i;
    clearInterval(i);
    i = setInterval(function(){
        $('#'+endId).datetimepicker('setEndDate', new Date());
        $('#'+endId).datetimepicker('setDate', new Date());
    },1000*60);
}

// 获取dateTimePicker显示日期的前一天
function getPrevDate(inputId){
    var prevTime = new Date(new Date($("#"+inputId).val())-24*60*60*1000);
    var year = prevTime.getFullYear();
    var month = prevTime.getMonth()+1;
    var day = prevTime.getDate();

    if (month < 10) {
        month = "0"+month;
    }
    if (day < 10) {
        day = "0"+day;
    }

    return year+"-"+month+"-"+day;
}
// 雨量统计: 未到达的时间添加 "—" (数据, 日期-日);
function addHorizonDay(data,compareString){
    // data = createData(0,0,24,0);  //测试数据

    if (data === null) {
        data = [];
    }else {
        var compareDate = new Date(compareString);  //选中的时间
        var todayTime = new Date();  //今天start
        todayTime.setHours(0);
        todayTime.setMinutes(0);
        todayTime.setSeconds(0);
        todayTime.setMilliseconds(0);
        var yestodayTime = new Date(todayTime.getTime()-24*60*60*1000);  //昨天start
        var thisHour = new Date().getHours();  //查询时的小时数;

        if (compareDate > todayTime) {
            if (thisHour >= 8) {
                console.log("今天8之后");
                data.forEach(function(val,i){
                    for(var x in val){   //今天还没到的时间
                        if(parseInt(x,10)>=thisHour){
                            val[x] = "—";
                        }
                    }
                    for(var m=0;m<=7;m++){  //明天的时间
                        val[m] = "—";
                    }
                    if (thisHour === 8) {
                        val["total"] = "—";
                    }
                });
            }
            else{
                console.log("今天8之前");
                data.forEach(function(val,i){
                    for(var x in val){
                        if (!isNaN(x)||x==="total") {
                            val[x] = "—";
                        }
                    }
                });
            }
        }else if((compareDate < todayTime) && (compareDate > yestodayTime)){  // 昨天
            if (thisHour >= 8) {
                console.log("昨天8之后");  // 不处理
            }else{
                console.log("昨天8之前");
                data.forEach(function(val,i){
                    for(var x in val){
                        if ((parseInt(x,10)>=thisHour)&&(parseInt(x,10)<8)) {
                            val[x] = "—";
                        }
                    }
                });
            }
        }
    }

    return data;
}

// 雨量统计: 未到达的时间添加 "—" (数据, 日期-月);
function addHorizonMonth(data,compareString){
    // data = createData(0,0,31,0);
    // console.log(data);
    if (data === null) {
        data = [];
    }else {
        var thisTime = new Date();
        var thisDay = thisTime.getDate();
        var thisMonth = thisTime.getMonth()+1;
        var thatMonth = parseInt(compareString.split("-")[1]);
        if (thatMonth === thisMonth) {
            data.forEach(function(val,i){
                for(var x in val){
                    if (parseInt(x,10) > thisDay) {
                        val[x] = "—";
                    }
                }
            });
        }
    }
    return data;
}

// 雨量统计: 未到达的时间添加 "—" (数据, 日期-年);
function addHorizonYear(data,compareString){
    // data = createData(0,1,12,0);

    if (data === null) {
        data = [];
    }else {
        var thisTime = new Date();
        var thisMonth = thisTime.getMonth()+1;
        var thisYear = thisTime.getFullYear();
        var thatYear = parseInt(compareString.split("-")[0]);
        if (thatYear === thisYear) {
            var yearProperty = {"Jan": 1,"Feb": 2,"Mar": 3,"Apr": 4,"May": 5,"Jun": 6,"Jul": 7,"Aug": 8,"Sep": 9,"Octb": 10,"Nov": 11,"Dece": 12};
            data.forEach(function(val,i){
                for(var x in val){
                    if (yearProperty[x] > thisMonth) {
                        val[x] = "—";
                    }
                }
            });
        }
    }
    return data;
}


// 生成测试数据,可删除
function createData(flag,start,end,content){
    var dataArr = [];
    var item = {};
    var yearProperty = ["sys_code","station_name","total","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Octb","Nov","Dece"]


    for(var i=start;i<=end;i++){
        item[yearProperty[i+2]] = content;
    }
    item["station_name"] = "雨量站333";
    item["sys_code"] = "#011";
    item["total"] = 1.2;
    dataArr.push(item);
    return dataArr;
}
