package ekuter.mvc.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ekuter.mvc.constants.Constants;
import ekuter.mvc.exception.BusinessException;
import ekuter.mvc.util.ResultMessageUtil;
import mybatisPro.mybatisService.impl.StationService;
import mybatisPro.mybatisService.impl.WaterLevelService;

/**
 * 水位管理类（水库水位，河道水位）
 * @author si.yu
 * @date 2017/8/8
 * @version 1.0
 * */
@RestController
@RequestMapping("waterLevel")
public class WaterLevelManagerController {
	
	private static final Logger logger = LoggerFactory.getLogger(WaterLevelManagerController.class);

	@Autowired
	private StationService stationService;
	@Autowired
	private WaterLevelService waterLevelService;
	
	/**
	 * 水库水位信息查询
	 * @param begin_time
	 * @param ent_time
	 * @return
	 * */
	@RequestMapping("getWaterLevelInfo")
	public ResultMessageUtil searchReservoirWaterInfo(String begin_time,String end_time){
		
		ResultMessageUtil resultMsg = new ResultMessageUtil();
		
		if(null != begin_time || null != end_time){
			List<Long> waterLevelStaList = new ArrayList<Long>(); 
			//根据测站类型查询水库水位站ID列表
			List<Long> staIdList_W = stationService.getStationIdByTypeId(Constants.WATER_LEVEL_STATION);
			//根据测站类型查询水库水文站ID列表
			List<Long> StaIdList_R = stationService.getStationIdByTypeId(Constants.WATER_RAINFALL_STATION);
			
			if(null != staIdList_W || null != StaIdList_R){
				
				waterLevelStaList.addAll(staIdList_W);
				waterLevelStaList.addAll(StaIdList_R);
				
				if(!waterLevelStaList.isEmpty()){
					
					List<Map<String, Object>> waterLevelList = new ArrayList<Map<String,Object>>();
					//遍历水库水位站列表，根据ID查询水位数据
					for(Long staId : waterLevelStaList){
						
						Map<String, Object> waterLevelInfo = 
								waterLevelService.getWaterLevelInfo(begin_time, end_time, staId);
						
						if(null != waterLevelInfo){
							waterLevelList.add(waterLevelInfo);
						}else{
							logger.info(Constants.EXCEPTION_MAP.get("EX_WATERLEVEL_1"));
							throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_WATERLEVEL_1"));
						}
 					}
					resultMsg.setData(waterLevelList);
					resultMsg.setStatus(0);
					return resultMsg;
					
				}else{
					resultMsg.setMsg("该水库未布置水库水位站！");
					resultMsg.setStatus(0); 
					return resultMsg;
				}
				
			}else{
				logger.info(Constants.EXCEPTION_MAP.get("WATERIDLIST"));
				throw new BusinessException(Constants.EXCEPTION_MAP.get("WATERIDLIST"));
			}
			
		}else{
			logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
			throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
		}
	}
	
	
	/**
	 * 河道水位信息查询
	 * @param begin_time
	 * @param ent_time
	 * @return
	 * */
	@RequestMapping("getRiverWaterLevelInfo")
	public ResultMessageUtil searchRiverWaterInfo(String begin_time,String end_time){
		
		ResultMessageUtil resultMsg = new ResultMessageUtil();
		
		if(null != begin_time || null != end_time){
			List<Long> waterLevelStaList = new ArrayList<Long>(); 
			//根据测站类型查询河道水位站ID列表
			List<Long> staIdList_R = stationService.getStationIdByTypeId(Constants.SOIL_MOISTURE_STATION);
			//根据测站类型查询河道水文站ID列表
			List<Long> staIdList_S = stationService.getStationIdByTypeId(Constants.SOIL_RAINFALL_STATION);
			
			if(null != staIdList_R || null != staIdList_S){
				
				waterLevelStaList.addAll(staIdList_R);
				waterLevelStaList.addAll(staIdList_S);
				
				if(!waterLevelStaList.isEmpty()){
					
					List<Map<String, Object>> waterLevelList = new ArrayList<Map<String,Object>>();
					//遍历河道水位站列表，根据ID查询水位数据
					for(Long staId : waterLevelStaList){
						
						Map<String, Object> waterLevelInfo = 
								waterLevelService.getSoilWaterLevelInfo(begin_time, end_time, staId);
						
						if(null != waterLevelInfo){
							waterLevelList.add(waterLevelInfo);
						}else{
							logger.info(Constants.EXCEPTION_MAP.get("EX_WATERLEVEL_12"));
							throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_WATERLEVEL_2"));
						}
 					}
					resultMsg.setData(waterLevelList);
					resultMsg.setStatus(0);
					return resultMsg;
					
				}else{
					resultMsg.setMsg("该水库未布置河道水位站！");
					resultMsg.setStatus(0); 
					return resultMsg;
				}
				
			}else{
				logger.info(Constants.EXCEPTION_MAP.get("WATERIDLIST"));
				throw new BusinessException(Constants.EXCEPTION_MAP.get("WATERIDLIST"));
			}
			
		}else{
			logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
			throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
		}
	}
}
