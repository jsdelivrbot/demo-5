package mybatisPro.mybatisService;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import ekuter.mvc.constants.Constants;
import ekuter.mvc.exception.BusinessException;
import mybatisPro.dataBase.SqlSessionHander;
import mybatisPro.myBatisDao.StationMapper;
import mybatisPro.myBatisDao.StationParam;
import mybatisPro.mybatisEntity.AreaEntity;
import mybatisPro.mybatisEntity.ParamCodeEntity;
import mybatisPro.mybatisEntity.StationEntity;
import mybatisPro.mybatisEntity.StationParamEntity;
import mybatisPro.mybatisService.impl.AreaService;
import mybatisPro.mybatisService.impl.StationService;

/**
 * 测站信息业务层实现类
 * @author si.yu
 * @date 2017/7/14
 * @version 1.0
 * */
@Service
public class StationServiceImpl implements StationService{

	private static final Logger logger=LoggerFactory.getLogger(StationServiceImpl.class);
	
	private AreaService areaService = new AreaServiceImpl();
	
	/**
	 * 创建测站信息
	 * @param stationEntity
	 * @return
	 * */
	@Override
	public boolean createStation(StationEntity stationEntity,List<ParamCodeEntity> codeEntities) {
		
		try{
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				
				StationParam paramMapper = sqlsession.getMapper(StationParam.class);
				
				//测站区分(人工站/自动站)
				Integer station_category = stationEntity.getStation_type();
				
				if(Constants.MAN_MADE_STATION != station_category){
					
					int createFlag = stationMapper.createStation(stationEntity);
					Long sta_id = stationEntity.getId();
					for(ParamCodeEntity codeEntity : codeEntities){
						codeEntity.setSta_id(sta_id);
					}
					int insertFlag = stationMapper.insertParamCodeData(codeEntities);
					
					
					boolean paramInsert = insertNewStationParam(paramMapper,stationEntity,sta_id);
					
					
					sqlsession.commit();
					if(0 != createFlag && 0 != insertFlag && paramInsert){
						return true;
					}else{
						return false;
					}
					
				}else{
					int createFlag = stationMapper.createStation(stationEntity);
					sqlsession.commit();
					
					if(createFlag == 1){
						return true;
					}else{
						return false;
					}
				}
				
			});
			
		}catch(Exception e){
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_CREATE"));
		}
	}
	
	/**
	 * 检测测站是否为雨量站
	 * 所属区域雨量平均算法是否为系数算法
	 * 如果是，系数表中添加系数数据
	 * @param paramMapper
	 * @param stationEntity
	 * @param sta_id
	 * */
	private boolean insertNewStationParam(StationParam paramMapper,StationEntity stationEntity,Long sta_id){
		//获取新建测站的区域
		Long area_id = stationEntity.getArea_id();
		Long stationType = stationEntity.getStation_type_id();
		
		if(null != area_id && null != stationType){
			if(Constants.RAINFALL_STATION.longValue() == stationType.longValue() || 
					Constants.SOIL_RAINFALL_STATION.longValue() == stationType.longValue() || 
					Constants.WATER_RAINFALL_STATION.longValue() == stationType.longValue()){
				AreaEntity areaEntity = areaService.getAreaInfoDetail(area_id);
				if(1 == areaEntity.getAlgorithmType()){
					List<StationParamEntity> paramEntities = new ArrayList<StationParamEntity>();
					StationParamEntity paramEntity = new StationParamEntity();
					paramEntity.setArea_id(area_id);
					paramEntity.setParam(0.0f);
					paramEntity.setSta_id(sta_id);
					paramEntities.add(paramEntity);
					
					int insertFlag = paramMapper.addParam(paramEntities);
					if(0 != insertFlag){
						return true;
					}else{
						return false;
					}
				}
			}
			
		}else{
			logger.info(Constants.EXCEPTION_MAP.get("PARAMERROR"));
			throw new BusinessException(Constants.EXCEPTION_MAP.get("PARAMERROR"));
		}
		return true;
	}

	
	/**
	 * 查询测站列表
	 * @param station_type(区分人工站和自动站)
	 * @return
	 * */
	@Override
	public List<Map<String, Object>> getStationList(Integer station_type) {

		try{
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				List<Map<String, Object>> sEntities = stationMapper.getStationList(station_type);
				return sEntities;
			});
		}catch(Exception e){
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_LIST"));
		}
	}

	
	/**
	 * 根据测站ID查询测站详细信息
	 * @param stationId
	 * @return
	 * */
	@Override
	public StationEntity getStationInfoById(Long stationId) {

		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				StationEntity sEntity = stationMapper.getStationInfoById(stationId);
				return sEntity;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_INFO"));
		}
	}


	/**
	 * 修改测站信息
	 * @param stationEntity
	 * @return boolean
	 * */
	@Override
	public boolean updateStationInfo(StationEntity stationEntity) {

		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				int updateFlag = stationMapper.updateStationInfo(stationEntity);
				sqlsession.commit();
				
				if(updateFlag == 1){
					return true;
				}else{
					return false;
				}
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_UPDATE"));
		}
	}


	/**
	 * 根据测站名称查询测站信息
	 * @param sta_name
	 * @return stationEntity
	 * */
	@Override
	public boolean findStationInfoByStaName(String sta_name) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				StationEntity sEntity = stationMapper.findStationInfoByStaName(sta_name);
				if(null != sEntity){
					return true;
				}else{
					return false;
				}
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_NAME"));
		}
	}


	/**
	 * 查询所有雨量测站的列表信息
	 * @param begin_time
	 * @param end_time
	 * @param type_id
	 * @return
	 * */
	@Override
	public Map<String, Object> getRainfallStationList(String begin_time, String end_time, Long sta_id) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				Map<String, Object> staInfo = 
						stationMapper.getRainfallStationList(begin_time, end_time ,sta_id);
				return staInfo;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STARAINFALL_LIST"));
		}
	}


	/**
	 * 根据测站类型查询测站ID
	 * @param type_id
	 * @return
	 * */
	@Override
	public List<Long> getStationIdByTypeId(Long type_id) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				List<Long> stationIdList = stationMapper.getStationIdByTypeId(type_id);
				return stationIdList;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STAID_LIST"));
		}
	}


	/**
	 * 根据测站类型查询测站部分信息
	 * @param type_id
	 * @return
	 * */
	@Override
	public List<Map<String, Object>> getStationInfoByTypeId(Long type_id) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				List<Map<String,Object>> staInfoList = stationMapper.getStationInfoByTypeId(type_id);
				return staInfoList;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STAID_LIST"));
		}
	}


	/**
	 * 区分人工站和自动站查询测站IDs
	 * @param type_id
	 * @param sta_type
	 * @return
	 * */
	@Override
	public List<Long> getTypeOfStationIds(Integer sta_type) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				List<Long> idsList = stationMapper.getTypeOfStationIds(sta_type);
				return idsList;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STAID_LIST"));
		}
	}


	/**
	 * 插入参数编码数据
	 * @param paramCodeEntity
	 * @return
	 * */
	@Override
	public boolean insertParamCode(ParamCodeEntity codeEntity) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				int insertFlag = 
						stationMapper.insertParamCode(codeEntity);
				
				if(0 == insertFlag){
					return false;
				}else{
					return true;
				}
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_PARAM_CODE"));
		}
	}

	
	/**
	 * 根据测站唯一编码查询测站信息
	 * @param sys_code
	 * @return
	 * */
	@Override
	public StationEntity findStationInfoBySysCode(String sys_code) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				StationEntity stationEntity = 
						stationMapper.findStationInfoBySysCode(sys_code);
				return stationEntity;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_SYS_CODE"));
		}
	}

}
