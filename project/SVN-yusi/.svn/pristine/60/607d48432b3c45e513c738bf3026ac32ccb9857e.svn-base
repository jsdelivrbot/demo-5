package mybatisPro.mybatisService;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import ekuter.mvc.constants.Constants;
import ekuter.mvc.exception.BusinessException;
import mybatisPro.dataBase.SqlSessionHander;
import mybatisPro.myBatisDao.StationMapper;
import mybatisPro.mybatisEntity.StationEntity;
import mybatisPro.mybatisService.impl.StationService;

/**
 * 测站信息业务层实现类
 * @author si.yu
 * @date 2017/7/14
 * @version 1.0
 * */
@Service
public class StationServiceImpl implements StationService{

	private static final Logger logger=LoggerFactory.getLogger(StationServiceImpl.class);
	
	/**
	 * 创建测站信息
	 * @param stationEntity
	 * @return
	 * */
	@Override
	public boolean createStation(StationEntity stationEntity) {
		
		try{
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				int createFlag = stationMapper.createStation(stationEntity);
				sqlsession.commit();
				
				if(createFlag == 1){
					return true;
				}else{
					return false;
				}
			});
			
		}catch(Exception e){
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_CREATE"));
		}
	}

	
	/**
	 * 查询测站列表
	 * @return
	 * */
	@Override
	public List<Map<String, Object>> getStationList() {

		try{
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				List<Map<String, Object>> sEntities = stationMapper.getStationList();
				return sEntities;
			});
		}catch(Exception e){
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_LIST"));
		}
	}

	
	/**
	 * 根据测站ID查询测站详细信息
	 * @param stationId
	 * @return
	 * */
	@Override
	public StationEntity getStationInfoById(Long stationId) {

		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				StationEntity sEntity = stationMapper.getStationInfoById(stationId);
				return sEntity;
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_INFO"));
		}
	}


	/**
	 * 修改测站信息
	 * @param stationEntity
	 * @return boolean
	 * */
	@Override
	public boolean updateStationInfo(StationEntity stationEntity) {

		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				int updateFlag = stationMapper.updateStationInfo(stationEntity);
				sqlsession.commit();
				
				if(updateFlag == 1){
					return true;
				}else{
					return false;
				}
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_UPDATE"));
		}
	}


	/**
	 * 根据测站名称查询测站信息
	 * @param sta_name
	 * @return stationEntity
	 * */
	@Override
	public boolean findStationInfoByStaName(String sta_name) {
		try {
			return SqlSessionHander.SqlExecute(sqlsession->{
				StationMapper stationMapper = sqlsession.getMapper(StationMapper.class);
				StationEntity sEntity = stationMapper.findStationInfoByStaName(sta_name);
				if(null != sEntity){
					return true;
				}else{
					return false;
				}
			});
		} catch (Exception e) {
			logger.info(e.getMessage());
			throw new BusinessException(Constants.EXCEPTION_MAP.get("EX_STATION_NAME"));
		}
	}

}
