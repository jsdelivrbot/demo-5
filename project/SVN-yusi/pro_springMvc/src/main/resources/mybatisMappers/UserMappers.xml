<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的  
	例如namespace="mybatisPro.myBatisDao.UserMapper"就是mybatisPro.myBatisDao(包名)+userMapper(userMapper.xml文件去除后缀)  
 -->    
 <mapper namespace="mybatisPro.myBatisDao.UserMapper">
 <cache type="mybatisPro.mybatisRedis.MybatisRedisCache" />
 	
 	<!-- 
 		在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复  
    	使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型  
    	resultType="ybatisPro.mybatisEntity.UserEntity"就表示将查询结果封装成一个User类的对象返回  
    	User类就是users表所对应的实体类  
    -->  
    
    <!-- 查询用户列表 -->  
    <select id="getUserInfo" resultType="mybatisPro.mybatisEntity.UserEntity">  
        select * from user 
    </select>  
    <!-- 根据用户名查询用户信息 -->  
    <select id="getUserInfoByUsername" resultType="mybatisPro.mybatisEntity.UserEntity">
    	select * from user where username=#{username}
    </select>
    <!-- 修改密码 -->  
    <update id="updateUserInfo" parameterType="mybatisPro.mybatisEntity.UserEntity">
    			update user
		<set>
			<if test="role_id!=null">
				role_id=#{role_id},
			</if>
			<if test="username!=null">
				username=#{username},
			</if>
			<if test="password!=null">
				password=#{password},
			</if>
			<if test="salt!=null">
				salt=#{salt},
			</if>
			<if test="telephone!=null">
				telephone=#{telephone},
			</if>
			<if test="modify_time!=null">
				modify_time=#{modify_time}
			</if>
			where id=#{id}
		</set>

	</update>	
 </mapper>