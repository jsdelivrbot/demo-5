<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 缓存管理器 -->

    <bean id="cacheManager" class="ekuter.mvc.cacheManager.RedisCacheManager">
      <property name="redisManager" ref="redisManager" />
    </bean>
  
    <bean id = "redisManager" class = "ekuter.mvc.cacheManager.RedisManager">
      <property name="host" value="192.168.1.248"/>
      <property name="port" value="6379"/>
      <property name="expire" value="7200"/>
      <property name="timeout" value="604800"/>
      <property name="password" value=""/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="ekuter.mvc.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
    </bean>

    <!-- Realm实现 -->
    <bean id="CustomRealm" class="ekuter.mvc.customRealm.CustomRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/> 
        <property name="cachingEnabled" value="false"/>
        <!--<property name="authenticationCachingEnabled" value="true"/>-->
        <!--<property name="authenticationCacheName" value="authenticationCache"/>-->
        <!--<property name="authorizationCachingEnabled" value="true"/>-->
        <!--<property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>
 
    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/><!-- maxAge=-1表示浏览器关闭时失效此Cookie； -->
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="12096000"/><!-- 14天 - 两周 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="redisSessionDAO" class="ekuter.mvc.cacheManager.RedisSessionDAO">
       <property name="redisManager" ref="redisManager" />
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/> 
        <property name="sessionDAO" ref="redisSessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="CustomRealm"/>
         <property name="sessionManager" ref="sessionManager"/>
         <property name="cacheManager" ref="cacheManager"/>
         <property name="rememberMeManager" ref="rememberMeManager"/> 
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    
    <!--退出登录  -->
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login.html" />
    </bean>
    
<!-- 		<bean id="jCaptchaValidateFilter"  class="com.ekuter.web.jcaptcha.JCaptchaValidateFilter">  
		    <property name="jcaptchaEbabled" value="true"/>  
		    <property name="jcaptchaParam" value="jcaptchaCode"/>  
		    <property name="failureKeyAttribute" value="shiroLoginFailure"/>  
		</bean>  --> 
    
    <!-- 基于Form表单的身份验证过滤器 -->
 <!--   <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="account"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="failureKeyAttribute" value="shiroLoginFailure"/>  
         loginurl：用户登陆地址，此地址是可以http访问的url地址
         <property name="loginUrl" value="/signIn"/>
    </bean> -->

    <bean id="sysUserFilter" class="ekuter.mvc.filter.SysUserFilter"/>  

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
      <property name="securityManager" ref="securityManager"/>
      
      <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
      <property name="loginUrl" value="/signIn" /> 
      
	    <!-- 认证成功统一跳转到index，shiro认证成功自动到上一个请求路径 -->
	    <!-- <property name="successUrl" value="/index"/> -->
	    <!-- <property name="successUrl" value="workbench.html"/> -->
	    
	    <!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
	    <property name="unauthorizedUrl" value="/refuse" />
	    
      <property name="filters">
            <map>
                <!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
                <!-- <entry key="authc" value-ref="formAuthenticationFilter"/> -->
                <entry key="SysUser" value-ref="sysUserFilter"/>
                <!-- <entry key="jCaptchaValidate" value-ref="jCaptchaValidateFilter"/>  -->
            </map>
        </property> 
        
        <property name="filterChainDefinitions">
            <value>
            <!-- 静态资源权限释放 -->
            /400.html = anon
            /500.html = anon
            /pro_js/** = anon
            /pro_css/** = anon
            /imgs/** = anon
            /login.html = anon 
            
            
            <!-- api -->
            /loginController/login = anon
            /logout = logout
             
            <!-- 以下是密码找回 -->
            <!-- 通过unauthorizedUrl指定没有权限操作时跳转控制-->
            /authenticated = authc
            
            <!-- 用户权限 必须写到最后，先配置的规则，先生效 -->
            /** = user,SysUser
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>